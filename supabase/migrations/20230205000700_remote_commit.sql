CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();


create table "public"."diet_category" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "update_at" timestamp with time zone default now(),
    "name" text
);


alter table "public"."diet_category" enable row level security;

create table "public"."diet_items" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "upated_at" timestamp with time zone default now(),
    "name" text,
    "type" text,
    "diet_category_id" bigint not null
);


alter table "public"."diet_items" enable row level security;

create table "public"."meal_plan_preferences" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "diet_items_id" bigint not null,
    "meal_plans_id" bigint,
    "users_id" uuid not null
);


alter table "public"."meal_plan_preferences" enable row level security;

create table "public"."meal_plans" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "user_id" uuid,
    "subscription_id" text,
    "gpt_response" text
);


alter table "public"."meal_plans" enable row level security;

CREATE UNIQUE INDEX diet_category_pkey ON public.diet_category USING btree (id);

CREATE UNIQUE INDEX meal_plan_preferences_pkey ON public.meal_plan_preferences USING btree (id);

CREATE UNIQUE INDEX meal_plans_pkey ON public.meal_plans USING btree (id);

CREATE UNIQUE INDEX proteins_pkey ON public.diet_items USING btree (id);

alter table "public"."diet_category" add constraint "diet_category_pkey" PRIMARY KEY using index "diet_category_pkey";

alter table "public"."diet_items" add constraint "proteins_pkey" PRIMARY KEY using index "proteins_pkey";

alter table "public"."meal_plan_preferences" add constraint "meal_plan_preferences_pkey" PRIMARY KEY using index "meal_plan_preferences_pkey";

alter table "public"."meal_plans" add constraint "meal_plans_pkey" PRIMARY KEY using index "meal_plans_pkey";

alter table "public"."diet_items" add constraint "diet_items_diet_category_id_fkey" FOREIGN KEY (diet_category_id) REFERENCES diet_category(id) not valid;

alter table "public"."diet_items" validate constraint "diet_items_diet_category_id_fkey";

alter table "public"."meal_plan_preferences" add constraint "meal_plan_preferences_diet_items_id_fkey" FOREIGN KEY (diet_items_id) REFERENCES diet_items(id) not valid;

alter table "public"."meal_plan_preferences" validate constraint "meal_plan_preferences_diet_items_id_fkey";

alter table "public"."meal_plan_preferences" add constraint "meal_plan_preferences_meal_plans_id_fkey" FOREIGN KEY (meal_plans_id) REFERENCES meal_plans(id) not valid;

alter table "public"."meal_plan_preferences" validate constraint "meal_plan_preferences_meal_plans_id_fkey";

alter table "public"."meal_plan_preferences" add constraint "meal_plan_preferences_users_id_fkey" FOREIGN KEY (users_id) REFERENCES users(id) not valid;

alter table "public"."meal_plan_preferences" validate constraint "meal_plan_preferences_users_id_fkey";

alter table "public"."meal_plans" add constraint "meal_plans_subscription_id_fkey" FOREIGN KEY (subscription_id) REFERENCES subscriptions(id) not valid;

alter table "public"."meal_plans" validate constraint "meal_plans_subscription_id_fkey";

alter table "public"."meal_plans" add constraint "meal_plans_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."meal_plans" validate constraint "meal_plans_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
  begin
    insert into public.users (id, full_name, avatar_url)
    values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
    return new;
  end;
$function$
;

create policy "Enable read access for all users"
on "public"."diet_category"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."diet_items"
as permissive
for select
to public
using (true);



